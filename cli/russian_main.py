"""
CLI –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
"""

from typing import Optional
import datetime
import typer
from pathlib import Path
from functools import wraps
from rich.console import Console
from rich.panel import Panel
from rich.spinner import Spinner
from rich.live import Live
from rich.columns import Columns
from rich.markdown import Markdown
from rich.layout import Layout
from rich.text import Text
from rich.table import Table
from collections import deque
import time
from rich.tree import Tree
from rich import box
from rich.align import Align
from rich.rule import Rule

from tradingagents.graph.russian_trading_graph import RussianTradingAgentsGraph
from tradingagents.russian_config import get_russian_config, set_llm_provider
from cli.models import AnalystType
from cli.utils import *

console = Console()

app = typer.Typer(
    name="RussianTradingAgents",
    help="–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: –ú—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞",
    add_completion=True,
)

# –ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
class RussianMessageBuffer:
    def __init__(self, max_length=100):
        self.messages = deque(maxlen=max_length)
        self.tool_calls = deque(maxlen=max_length)
        self.current_report = None
        self.final_report = None
        self.agent_status = {
            # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
            "–ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫": "–æ–∂–∏–¥–∞–Ω–∏–µ", 
            "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            # –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
            "–ë—ã—á–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            "–ú–µ–¥–≤–µ–∂–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            # –ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            "–¢—Ä–µ–π–¥–µ—Ä": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            # –ö–æ–º–∞–Ω–¥–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": "–æ–∂–∏–¥–∞–Ω–∏–µ",
            # –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
            "–ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä": "–æ–∂–∏–¥–∞–Ω–∏–µ",
        }
        self.current_agent = None
        self.report_sections = {
            "market_report": None,
            "news_report": None,
            "fundamentals_report": None,
            "investment_plan": None,
            "trader_investment_plan": None,
            "final_trade_decision": None,
        }

    def add_message(self, message_type, content):
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        self.messages.append((timestamp, message_type, content))

    def add_tool_call(self, tool_name, args):
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        self.tool_calls.append((timestamp, tool_name, args))

    def update_agent_status(self, agent, status):
        if agent in self.agent_status:
            self.agent_status[agent] = status
            self.current_agent = agent

    def update_report_section(self, section_name, content):
        if section_name in self.report_sections:
            self.report_sections[section_name] = content
            self._update_current_report()

    def _update_current_report(self):
        latest_section = None
        latest_content = None

        for section, content in self.report_sections.items():
            if content is not None:
                latest_section = section
                latest_content = content
               
        if latest_section and latest_content:
            section_titles = {
                "market_report": "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
                "news_report": "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏–∑",
                "fundamentals_report": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                "investment_plan": "–†–µ—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                "trader_investment_plan": "–ü–ª–∞–Ω –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤",
                "final_trade_decision": "–†–µ—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
            }
            self.current_report = (
                f"### {section_titles[latest_section]}\n{latest_content}"
            )

        self._update_final_report()

    def _update_final_report(self):
        report_parts = []

        # –û—Ç—á–µ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
        if any(
            self.report_sections[section]
            for section in [
                "market_report",
                "news_report", 
                "fundamentals_report",
            ]
        ):
            report_parts.append("## –û—Ç—á–µ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤")
            if self.report_sections["market_report"]:
                report_parts.append(
                    f"### –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n{self.report_sections['market_report']}"
                )
            if self.report_sections["news_report"]:
                report_parts.append(
                    f"### –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏–∑\n{self.report_sections['news_report']}"
                )
            if self.report_sections["fundamentals_report"]:
                report_parts.append(
                    f"### –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n{self.report_sections['fundamentals_report']}"
                )

        # –û—Ç—á–µ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        if self.report_sections["investment_plan"]:
            report_parts.append("## –†–µ—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
            report_parts.append(f"{self.report_sections['investment_plan']}")

        # –û—Ç—á–µ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        if self.report_sections["trader_investment_plan"]:
            report_parts.append("## –ü–ª–∞–Ω –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
            report_parts.append(f"{self.report_sections['trader_investment_plan']}")

        # –†–µ—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        if self.report_sections["final_trade_decision"]:
            report_parts.append("## –†–µ—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º")
            report_parts.append(f"{self.report_sections['final_trade_decision']}")

        self.final_report = "\n\n".join(report_parts) if report_parts else None


message_buffer = RussianMessageBuffer()


def create_russian_layout():
    layout = Layout()
    layout.split_column(
        Layout(name="header", size=3),
        Layout(name="main"),
        Layout(name="footer", size=3),
    )
    layout["main"].split_column(
        Layout(name="upper", ratio=3), Layout(name="analysis", ratio=5)
    )
    layout["upper"].split_row(
        Layout(name="progress", ratio=2), Layout(name="messages", ratio=3)
    )
    return layout


def update_russian_display(layout, spinner_text=None):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    layout["header"].update(
        Panel(
            "[bold green]–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫[/bold green]\n"
            "[dim]¬© [Tauric Research](https://github.com/TauricResearch) - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –†–§ —Ä—ã–Ω–∫–∞[/dim]",
            title="üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã",
            border_style="green",
            padding=(1, 2),
            expand=True,
        )
    )

    # –ü–∞–Ω–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    progress_table = Table(
        show_header=True,
        header_style="bold magenta",
        show_footer=False,
        box=box.SIMPLE_HEAD,
        title=None,
        padding=(0, 2),
        expand=True,
    )
    progress_table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="cyan", justify="center", width=20)
    progress_table.add_column("–ê–≥–µ–Ω—Ç", style="green", justify="center", width=25)
    progress_table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow", justify="center", width=15)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    teams = {
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏": [
            "–ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞",
            "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫",
            "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫",
        ],
        "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏": ["–ë—ã—á–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "–ú–µ–¥–≤–µ–∂–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"],
        "–¢—Ä–µ–π–¥–µ—Ä—ã": ["–¢—Ä–µ–π–¥–µ—Ä"],
        "–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": ["–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫"],
        "–ü–æ—Ä—Ç—Ñ–µ–ª—å": ["–ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"],
    }

    for team, agents in teams.items():
        first_agent = agents[0]
        status = message_buffer.agent_status[first_agent]
        
        status_colors = {
            "–æ–∂–∏–¥–∞–Ω–∏–µ": "yellow",
            "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è": "blue", 
            "–∑–∞–≤–µ—Ä—à–µ–Ω–æ": "green",
            "–æ—à–∏–±–∫–∞": "red",
        }
        
        if status == "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
            spinner = Spinner("dots", text="[blue]–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è[/blue]", style="bold cyan")
            status_cell = spinner
        else:
            status_color = status_colors.get(status, "white")
            status_cell = f"[{status_color}]{status}[/{status_color}]"
        
        progress_table.add_row(team, first_agent, status_cell)

        for agent in agents[1:]:
            status = message_buffer.agent_status[agent]
            if status == "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
                spinner = Spinner("dots", text="[blue]–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è[/blue]", style="bold cyan")
                status_cell = spinner
            else:
                status_color = status_colors.get(status, "white")
                status_cell = f"[{status_color}]{status}[/{status_color}]"
            progress_table.add_row("", agent, status_cell)

        progress_table.add_row("‚îÄ" * 20, "‚îÄ" * 25, "‚îÄ" * 15, style="dim")

    layout["progress"].update(
        Panel(progress_table, title="–ü—Ä–æ–≥—Ä–µ—Å—Å", border_style="cyan", padding=(1, 2))
    )

    # –ü–∞–Ω–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_table = Table(
        show_header=True,
        header_style="bold magenta",
        show_footer=False,
        expand=True,
        box=box.MINIMAL,
        show_lines=True,
        padding=(0, 1),
    )
    messages_table.add_column("–í—Ä–µ–º—è", style="cyan", width=8, justify="center")
    messages_table.add_column("–¢–∏–ø", style="green", width=12, justify="center")
    messages_table.add_column("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", style="white", no_wrap=False, ratio=1)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    all_messages = []

    for timestamp, tool_name, args in message_buffer.tool_calls:
        if isinstance(args, str) and len(args) > 100:
            args = args[:97] + "..."
        all_messages.append((timestamp, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", f"{tool_name}: {args}"))

    for timestamp, msg_type, content in message_buffer.messages:
        content_str = content
        if isinstance(content, list):
            text_parts = []
            for item in content:
                if isinstance(item, dict):
                    if item.get('type') == 'text':
                        text_parts.append(item.get('text', ''))
                    elif item.get('type') == 'tool_use':
                        text_parts.append(f"[–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {item.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}]")
                else:
                    text_parts.append(str(item))
            content_str = ' '.join(text_parts)
        elif not isinstance(content_str, str):
            content_str = str(content)
            
        if len(content_str) > 200:
            content_str = content_str[:197] + "..."
        all_messages.append((timestamp, msg_type, content_str))

    all_messages.sort(key=lambda x: x[0])
    max_messages = 12
    recent_messages = all_messages[-max_messages:]

    for timestamp, msg_type, content in recent_messages:
        wrapped_content = Text(content, overflow="fold")
        messages_table.add_row(timestamp, msg_type, wrapped_content)

    if spinner_text:
        messages_table.add_row("", "–ü—Ä–æ—Ü–µ—Å—Å", spinner_text)

    if len(all_messages) > max_messages:
        messages_table.footer = (
            f"[dim]–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {max_messages} –∏–∑ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π[/dim]"
        )

    layout["messages"].update(
        Panel(
            messages_table,
            title="–°–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            border_style="blue",
            padding=(1, 2),
        )
    )

    # –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞
    if message_buffer.current_report:
        layout["analysis"].update(
            Panel(
                Markdown(message_buffer.current_report),
                title="–¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç",
                border_style="green",
                padding=(1, 2),
            )
        )
    else:
        layout["analysis"].update(
            Panel(
                "[italic]–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞...[/italic]",
                title="–¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç",
                border_style="green",
                padding=(1, 2),
            )
        )

    # –ü–æ–¥–≤–∞–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    tool_calls_count = len(message_buffer.tool_calls)
    llm_calls_count = sum(
        1 for _, msg_type, _ in message_buffer.messages if msg_type == "–†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ"
    )
    reports_count = sum(
        1 for content in message_buffer.report_sections.values() if content is not None
    )

    stats_table = Table(show_header=False, box=None, padding=(0, 2), expand=True)
    stats_table.add_column("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", justify="center")
    stats_table.add_row(
        f"–í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {tool_calls_count} | –í—ã–∑–æ–≤—ã LLM: {llm_calls_count} | –û—Ç—á–µ—Ç—ã: {reports_count}"
    )

    layout["footer"].update(Panel(stats_table, border_style="grey50"))


def get_russian_user_selections():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # ASCII –∞—Ä—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_ascii = """
  üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã üá∑üá∫
    
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
   ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù 
      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó
      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
      ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
    """

    welcome_content = f"{welcome_ascii}\n"
    welcome_content += "[bold green]–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: –ú—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ MOEX[/bold green]\n\n"
    welcome_content += "[bold]–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:[/bold]\n"
    welcome_content += "I. –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ ‚Üí II. –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π ‚Üí III. –¢—Ä–µ–π–¥–µ—Ä ‚Üí IV. –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚Üí V. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º\n\n"
    welcome_content += "[dim]–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –Ω–∞ –±–∞–∑–µ [Tauric Research](https://github.com/TauricResearch)[/dim]"

    welcome_box = Panel(
        welcome_content,
        border_style="green",
        padding=(1, 2),
        title="üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã",
        subtitle="–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞",
    )
    console.print(Align.center(welcome_box))
    console.print()

    def create_question_box(title, prompt, default=None):
        box_content = f"[bold]{title}[/bold]\n"
        box_content += f"[dim]{prompt}[/dim]"
        if default:
            box_content += f"\n[dim]–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}[/dim]"
        return Panel(box_content, border_style="blue", padding=(1, 2))

    # –®–∞–≥ 1: –¢–∏–∫–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    console.print(
        create_question_box(
            "–®–∞–≥ 1: –¢–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏", "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ MOEX", "SBER"
        )
    )
    selected_ticker = get_russian_ticker()

    # –®–∞–≥ 2: –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    default_date = datetime.datetime.now().strftime("%Y-%m-%d")
    console.print(
        create_question_box(
            "–®–∞–≥ 2: –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞",
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞ (YYYY-MM-DD)",
            default_date,
        )
    )
    analysis_date = get_analysis_date()

    # –®–∞–≥ 3: –í—ã–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
    console.print(
        create_question_box(
            "–®–∞–≥ 3: –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"
        )
    )
    selected_analysts = select_russian_analysts()
    console.print(
        f"[green]–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:[/green] {', '.join(selected_analysts)}"
    )

    # –®–∞–≥ 4: –ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    console.print(
        create_question_box(
            "–®–∞–≥ 4: –ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        )
    )
    selected_research_depth = select_research_depth()

    # –®–∞–≥ 5: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
    console.print(
        create_question_box(
            "–®–∞–≥ 5: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
        )
    )
    selected_llm_provider = select_russian_llm_provider()
    
    # –®–∞–≥ 6: –ú–æ–¥–µ–ª–∏ –º—ã—à–ª–µ–Ω–∏—è
    console.print(
        create_question_box(
            "–®–∞–≥ 6: –ú–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
    )
    selected_deep_thinker = select_russian_deep_thinking_agent(selected_llm_provider)
    selected_shallow_thinker = select_russian_shallow_thinking_agent(selected_llm_provider)

    return {
        "ticker": selected_ticker,
        "analysis_date": analysis_date,
        "analysts": selected_analysts,
        "research_depth": selected_research_depth,
        "llm_provider": selected_llm_provider,
        "deep_thinker": selected_deep_thinker,
        "shallow_thinker": selected_shallow_thinker,
    }


def get_russian_ticker():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    return typer.prompt("", default="SBER").upper()


def select_russian_analysts():
    """–í—ã–±—Ä–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
    import questionary
    
    choices = questionary.checkbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤:",
        choices=[
            questionary.Choice("–ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞ MOEX", value="market"),
            questionary.Choice("–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫ (–†–ë–ö, Smart-Lab)", value="news"),
            questionary.Choice("–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", value="fundamentals"),
        ],
        instruction="\n- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã\n- 'a' –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö\n- Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        validate=lambda x: len(x) > 0 or "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
        style=questionary.Style([
            ("checkbox-selected", "fg:green"),
            ("selected", "fg:green noinherit"),
            ("highlighted", "noinherit"),
            ("pointer", "noinherit"),
        ]),
    ).ask()

    if not choices:
        console.print("\n[red]–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í—ã—Ö–æ–¥...[/red]")
        exit(1)

    return choices


def select_russian_llm_provider():
    """–í—ã–±—Ä–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM"""
    import questionary
    
    providers = [
        ("Deepseek (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞)", "deepseek"),
        ("Google Gemini (—Ö–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)", "gemini"),
        ("OpenAI (–±–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)", "openai"),
    ]
    
    choice = questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò:",
        choices=[
            questionary.Choice(display, value=value) for display, value in providers
        ],
        instruction="\n- –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n- Enter –¥–ª—è –≤—ã–±–æ—Ä–∞",
        style=questionary.Style([
            ("selected", "fg:yellow noinherit"),
            ("highlighted", "fg:yellow noinherit"),
            ("pointer", "fg:yellow noinherit"),
        ]),
    ).ask()

    if choice is None:
        console.print("\n[red]–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω. –í—ã—Ö–æ–¥...[/red]")
        exit(1)

    return choice


def select_russian_deep_thinking_agent(provider):
    """–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    import questionary
    
    models = {
        "deepseek": [
            ("Deepseek Reasoner - –ú–æ–¥–µ–ª—å —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", "deepseek-reasoner"),
            ("Deepseek Chat - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", "deepseek-chat"),
        ],
        "gemini": [
            ("Gemini 2.5 Pro - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á", "gemini-2.5-pro"),
            ("Gemini 2.5 Flash - –ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å", "gemini-2.5-flash"),
        ],
        "openai": [
            ("GPT-4 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å OpenAI", "gpt-4"),
            ("GPT-3.5 Turbo - –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å", "gpt-3.5-turbo"),
        ]
    }
    
    choice = questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
        choices=[
            questionary.Choice(display, value=value)
            for display, value in models[provider]
        ],
        instruction="\n- –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n- Enter –¥–ª—è –≤—ã–±–æ—Ä–∞",
        style=questionary.Style([
            ("selected", "fg:magenta noinherit"),
            ("highlighted", "fg:magenta noinherit"),
            ("pointer", "fg:magenta noinherit"),
        ]),
    ).ask()

    if choice is None:
        console.print("\n[red]–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã—Ö–æ–¥...[/red]")
        exit(1)

    return choice


def select_russian_shallow_thinking_agent(provider):
    """–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    import questionary
    
    models = {
        "deepseek": [
            ("Deepseek Chat - –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", "deepseek-chat"),
            ("Deepseek Reasoner - –ú–æ–¥–µ–ª—å —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏", "deepseek-reasoner"),
        ],
        "gemini": [
            ("Gemini 2.5 Flash - –ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å", "gemini-2.5-flash"),
            ("Gemini 2.5 Pro - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å", "gemini-2.5-pro"),
        ],
        "openai": [
            ("GPT-3.5 Turbo - –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å", "gpt-3.5-turbo"),
            ("GPT-4 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å", "gpt-4"),
        ]
    }
    
    choice = questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
        choices=[
            questionary.Choice(display, value=value)
            for display, value in models[provider]
        ],
        instruction="\n- –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n- Enter –¥–ª—è –≤—ã–±–æ—Ä–∞",
        style=questionary.Style([
            ("selected", "fg:magenta noinherit"),
            ("highlighted", "fg:magenta noinherit"),
            ("pointer", "fg:magenta noinherit"),
        ]),
    ).ask()

    if choice is None:
        console.print("\n[red]–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã—Ö–æ–¥...[/red]")
        exit(1)

    return choice


def run_russian_analysis():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selections = get_russian_user_selections()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM
    set_llm_provider(
        provider=selections["llm_provider"],
        deep_model=selections["deep_thinker"],
        fast_model=selections["shallow_thinker"]
    )

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_russian_config()
    config["max_debate_rounds"] = selections["research_depth"]
    config["max_risk_discuss_rounds"] = selections["research_depth"]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
    graph = RussianTradingAgentsGraph(
        selected_analysts=selections["analysts"], 
        config=config, 
        debug=True
    )

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = Path(config["results_dir"]) / selections["ticker"] / selections["analysis_date"]
    results_dir.mkdir(parents=True, exist_ok=True)
    report_dir = results_dir / "reports"
    report_dir.mkdir(parents=True, exist_ok=True)
    log_file = results_dir / "message_tool.log"
    log_file.touch(exist_ok=True)

    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    def save_message_decorator(obj, func_name):
        func = getattr(obj, func_name)
        @wraps(func)
        def wrapper(*args, **kwargs):
            func(*args, **kwargs)
            timestamp, message_type, content = obj.messages[-1]
            content = content.replace("\n", " ")
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"{timestamp} [{message_type}] {content}\n")
        return wrapper
    
    def save_tool_call_decorator(obj, func_name):
        func = getattr(obj, func_name)
        @wraps(func)
        def wrapper(*args, **kwargs):
            func(*args, **kwargs)
            timestamp, tool_name, args = obj.tool_calls[-1]
            args_str = ", ".join(f"{k}={v}" for k, v in args.items())
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"{timestamp} [–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞] {tool_name}({args_str})\n")
        return wrapper

    def save_report_section_decorator(obj, func_name):
        func = getattr(obj, func_name)
        @wraps(func)
        def wrapper(section_name, content):
            func(section_name, content)
            if section_name in obj.report_sections and obj.report_sections[section_name] is not None:
                content = obj.report_sections[section_name]
                if content:
                    file_name = f"{section_name}.md"
                    with open(report_dir / file_name, "w", encoding="utf-8") as f:
                        f.write(content)
        return wrapper

    message_buffer.add_message = save_message_decorator(message_buffer, "add_message")
    message_buffer.add_tool_call = save_tool_call_decorator(message_buffer, "add_tool_call")
    message_buffer.update_report_section = save_report_section_decorator(message_buffer, "update_report_section")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    layout = create_russian_layout()

    with Live(layout, refresh_per_second=4) as live:
        update_russian_display(layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_buffer.add_message("–°–∏—Å—Ç–µ–º–∞", f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä: {selections['ticker']}")
        message_buffer.add_message("–°–∏—Å—Ç–µ–º–∞", f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {selections['analysis_date']}")
        message_buffer.add_message("–°–∏—Å—Ç–µ–º–∞", f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò: {selections['llm_provider']}")
        message_buffer.add_message("–°–∏—Å—Ç–µ–º–∞", f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {', '.join(selections['analysts'])}")
        update_russian_display(layout)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞–≥–µ–Ω—Ç–æ–≤
        for agent in message_buffer.agent_status:
            message_buffer.update_agent_status(agent, "–æ–∂–∏–¥–∞–Ω–∏–µ")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
        for section in message_buffer.report_sections:
            message_buffer.report_sections[section] = None
        message_buffer.current_report = None
        message_buffer.final_report = None

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        first_analyst_map = {
            "market": "–ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞",
            "news": "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫", 
            "fundamentals": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫"
        }
        
        if selections['analysts']:
            first_analyst = first_analyst_map.get(selections['analysts'][0])
            if first_analyst:
                message_buffer.update_agent_status(first_analyst, "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        
        update_russian_display(layout)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞
        spinner_text = f"–ê–Ω–∞–ª–∏–∑ {selections['ticker']} –Ω–∞ {selections['analysis_date']}..."
        update_russian_display(layout, spinner_text)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        try:
            final_state, decision = graph.propagate(selections["ticker"], selections["analysis_date"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            for agent in message_buffer.agent_status:
                message_buffer.update_agent_status(agent, "–∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            message_buffer.add_message("–ê–Ω–∞–ª–∏–∑", f"–ê–Ω–∞–ª–∏–∑ {selections['ticker']} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
            for section in message_buffer.report_sections.keys():
                if section in final_state:
                    message_buffer.update_report_section(section, final_state[section])

            update_russian_display(layout)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.print(f"\nüéØ [bold green]–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –¥–ª—è {selections['ticker']}: {decision}[/bold green]")
            
        except Exception as e:
            console.print(f"\n‚ùå [red]–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}[/red]")
            for agent in message_buffer.agent_status:
                message_buffer.update_agent_status(agent, "–æ—à–∏–±–∫–∞")
            update_russian_display(layout)


@app.command()
def analyze():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    run_russian_analysis()


@app.command()
def portfolio(
    tickers: str = typer.Option(..., help="–¢–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER,GAZP,LKOH)"),
    date: str = typer.Option(None, help="–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (YYYY-MM-DD)"),
    provider: str = typer.Option("deepseek", help="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò (deepseek/gemini/openai)")
):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π"""
    
    if not date:
        date = datetime.datetime.now().strftime("%Y-%m-%d")
    
    ticker_list = [t.strip().upper() for t in tickers.split(",")]
    
    console.print(f"üá∑üá∫ [bold]–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π[/bold]")
    console.print(f"üìÖ –î–∞—Ç–∞: {date}")
    console.print(f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
    console.print(f"üìä –¢–∏–∫–µ—Ä—ã: {', '.join(ticker_list)}")
    console.print()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if provider == "deepseek":
        set_llm_provider("deepseek", "deepseek-reasoner", "deepseek-chat")
    elif provider == "gemini":
        set_llm_provider("gemini", "gemini-2.5-pro", "gemini-2.5-flash")
    elif provider == "openai":
        set_llm_provider("openai", "gpt-4", "gpt-3.5-turbo")
    
    config = get_russian_config()
    graph = RussianTradingAgentsGraph(debug=False, config=config)
    
    try:
        results = graph.analyze_portfolio(ticker_list, date)
        
        console.print(results["portfolio_summary"])
        
        console.print("\nüìã [bold]–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:[/bold]")
        for ticker, recommendation in results["recommendations"].items():
            if "ERROR" in recommendation:
                console.print(f"  {ticker}: [red]–û–®–ò–ë–ö–ê[/red]")
            elif any(word in recommendation.upper() for word in ["–ü–û–ö–£–ü–ê–¢–¨", "BUY"]):
                console.print(f"  {ticker}: [green]–ü–û–ö–£–ü–ê–¢–¨[/green]")
            elif any(word in recommendation.upper() for word in ["–ü–†–û–î–ê–í–ê–¢–¨", "SELL"]):
                console.print(f"  {ticker}: [red]–ü–†–û–î–ê–í–ê–¢–¨[/red]")
            else:
                console.print(f"  {ticker}: [yellow]–î–ï–†–ñ–ê–¢–¨[/yellow]")
                
    except Exception as e:
        console.print(f"‚ùå [red]–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}[/red]")


@app.command()
def market_overview(
    date: str = typer.Option(None, help="–î–∞—Ç–∞ –æ–±–∑–æ—Ä–∞ (YYYY-MM-DD)"),
    provider: str = typer.Option("deepseek", help="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò")
):
    """–û–±–∑–æ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    
    if not date:
        date = datetime.datetime.now().strftime("%Y-%m-%d")
    
    console.print(f"üá∑üá∫ [bold]–û–±–∑–æ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞[/bold]")
    console.print(f"üìÖ –î–∞—Ç–∞: {date}")
    console.print()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if provider == "deepseek":
        set_llm_provider("deepseek", "deepseek-reasoner", "deepseek-chat")
    elif provider == "gemini":
        set_llm_provider("gemini", "gemini-2.5-pro", "gemini-2.5-flash")
    
    config = get_russian_config()
    graph = RussianTradingAgentsGraph(debug=False, config=config)
    
    try:
        summary = graph.get_russian_market_summary(date)
        
        console.print(f"ü§ñ [bold]–ú–æ–¥–µ–ª—å:[/bold] {summary['config']}")
        
        console.print("\nüìà [bold]–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:[/bold]")
        for index, data in summary["indices"].items():
            if "–û—à–∏–±–∫–∞" not in data:
                console.print(f"  ‚úÖ {index}: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
            else:
                console.print(f"  ‚ùå {index}: –û—à–∏–±–∫–∞")
        
        if summary["market_overview"]:
            console.print(f"\nüì∞ [bold]–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞:[/bold]")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            overview_text = summary["market_overview"][:500]
            if len(summary["market_overview"]) > 500:
                overview_text += "..."
            console.print(overview_text)
            
    except Exception as e:
        console.print(f"‚ùå [red]–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {e}[/red]")


if __name__ == "__main__":
    app()